@startuml
class Main {
    +main(String[] args)
}

package Controllers {
    class UserController {
        +getUser(String id) : Response
        +getUsers(String username, Request request) : Response
        +addUser(Request request) : Response
        +updateUser(String username, Request request) : Response
        +deleteUser(String id) : Response
    }
    class BattleController {
        +handleBattle(Request request) : Response
    }
    class DeckController {
        +getDeck(Request request) : Response
        +configureDeck(Request request) : Response
    }
    class PackageController {
        +createPackage(Request request) : Response
    }
    class StatsController {
        +showStats(Request request) : Response
    }
    class TransactionsController {
        +acquirePackage(Request request) : Response
    }
    class TradingsController {
        +getTradingDeals(Request request) : Response
        +createTradingDeal(Request request) : Response
        +deleteTradingDeal(Request request) : Response
        +executeTradingDeal(Request request) : Response
    }
}

package Models {
    class Card {
        -name: String
        -damage: int
        +getCardInfo() : String
    }

    class MonsterCard extends Card {
        -element: String
        -type: String
        +attack() : void
    }

    class SpellCard extends Card {
        +castSpell() : void
    }

    class Deck {
        -cards: List<Card>
        +addCard(Card) : void
        +removeCard(Card) : void
        +getBestCards() : List<Card>
    }

    class User {
        -username: String
        -password: String
        +getUserInfo() : String
        +tradeCard(Card, User) : void
        +updateScore(int points) : void
        +getStack() : List<Card>
        +loadUserCards() : void
    }

    class ScoreBoard {
        -players: List<User>
        +displayRankings() : void
    }

    class Package {
        -id: UUID
        -cards: List<Card>
        +getId() : UUID
        +getCards() : List<Card>
    }

    class TradingDeal {
        -id: UUID
        -ownerId: UUID
        -cardToTrade: UUID
        -type: String
        -minimumDamage: int
        +getOwnerId() : UUID
        +getCardToTrade() : UUID
        +getType() : String
        +getMinimumDamage() : int
    }
}

package Services {
    class UserService {
        +handleRequest(Request request) : Response
    }

    class BattleService {
        +handleRequest(Request request) : Response
        +startBattleAsync(Request request) : Response
    }

    class SessionService {
        +handleRequest(Request request) : Response
    }

    class DeckService {
        +handleRequest(Request request) : Response
    }

    class CardService {
        +handleRequest(Request request) : Response
    }

    class StatsService {
        +handleRequest(Request request) : Response
    }

    class ScoreboardService {
        +handleRequest(Request request) : Response
    }

    class PackageService {
        +handleRequest(Request request) : Response
    }

    class TransactionsService {
        +handleRequest(Request request) : Response
    }

    class TradingsService {
        +handleRequest(Request request) : Response
    }
}

package Repositories {
    class TradingDealRepository {
        +findById(UUID) : TradingDeal
        +delete(UUID) : void
        +findAll() : List<TradingDeal>
        +save(TradingDeal) : void
    }

    class CardRepository {
        +findById(UUID) : Card
        +removeCardFromUser(UUID userId, UUID cardId) : void
        +addCardToUser(UUID userId, UUID cardId) : void
        +findCardsByUserId(UUID userId) : List<Card>
        +save(Card) : void
    }

    class UserRepository {
        +findUserByToken(String) : User
        +findUserById(UUID) : User
        +update(User) : void
        +findAllUsers() : List<User>
        +findAllUsersSortedByScore() : List<User>
        +findUserByUsernameAndToken(String username, String token) : User
    }

    class DeckRepository {
        +findDeckByUserId(UUID userId) : List<Card>
    }

    class PackageRepository {
        +findAll() : List<Package>
        +delete(UUID packageId) : void
    }
}

Main --> Controllers
Controllers --> Models
Controllers --> Services
Controllers --> Repositories
Services --> Repositories
Card <|-- MonsterCard
Card <|-- SpellCard
@enduml